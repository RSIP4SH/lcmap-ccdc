from pyspark.sql import SparkSession
import logging
import os
import socket

# All of these are evaluated at import time!!!  That means the env vars need
# to be set before the firebird module is imported.  
HOST = socket.gethostbyname(socket.getfqdn())
AARDVARK = os.getenv('FIREBIRD_AARDVARK', 'http://localhost:5678')
AARDVARK_SPECS = os.getenv('FIREBIRD_AARDVARK_SPECS', '/v1/landsat/chip-specs')
AARDVARK_CHIPS = os.getenv('FIREBIRD_AARDVARK_CHIPS', '/v1/landsat/chips')
CASSANDRA_CONTACT_POINTS = os.getenv('FIREBIRD_CASSANDRA_CONTACT_POINTS', HOST)
CASSANDRA_USER = os.getenv('FIREBIRD_CASSANDRA_USER', 'cassandra')
CASSANDRA_PASS = os.getenv('FIREBIRD_CASSANDRA_PASS', 'cassandra')
CASSANDRA_KEYSPACE = os.getenv('FIREBIRD_CASSANDRA_KEYSPACE', 'lcmap_changes_local')
CHIPS_URL = ''.join([AARDVARK, AARDVARK_CHIPS])
INITIAL_PARTITION_COUNT = int(os.getenv('FIREBIRD_INITIAL_PARTITION_COUNT', 1))
LOG_LEVEL = os.getenv('FIREBIRD_LOG_LEVEL', 'WARN')
PRODUCT_PARTITION_COUNT = int(os.getenv('FIREBIRD_PRODUCT_PARTITION_COUNT', 1))
QA_BIT_PACKED = os.getenv('FIREBIRD_CCD_QA_BITPACKED', 'True')
SPECS_URL = ''.join([AARDVARK, AARDVARK_SPECS])
STORAGE_PARTITION_COUNT = int(os.getenv('FIREBIRD_STORAGE_PARTITION_COUNT', 1))


def spark_session():
    """Return a spark session in a consistent way to the application
 
    Returns:
        pyspark.sql.SparkSession
    """
    
    return SparkSession.builder.getOrCreate()


# Must obtain a logger from log4j since the jvm is what is actually 
# doing all the logging under the covers for PySpark.
# Format and logging configuration is handled through log4j.properties.
def get_logger(sc, name):
    """Get PySpark configured logger
    
    Args:
        sc: SparkContext
        name (str): Name of the logger (category)

    Returns:
        Logger instance
    """

    return sc._jvm.org.apache.log4j.LogManager.getLogger(name)


def ccd_params():
    """Parameters for the ccd algorithm based on the QA_BIT_PACKED environment
    variable

    Returns:
        dict: CCD Parameters
    """

    params = {}
    if QA_BIT_PACKED is not 'True':
        params = {'QA_BITPACKED': False,
                  'QA_FILL': 255,
                  'QA_CLEAR': 0,
                  'QA_WATER': 1,
                  'QA_SHADOW': 2,
                  'QA_SNOW': 3,
                  'QA_CLOUD': 4}
    return params


